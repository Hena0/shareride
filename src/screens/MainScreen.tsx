import React, { useState, useEffect } from 'react';
import {
  StyleSheet,
  View,
  ImageBackground,
  TouchableOpacity,
  Text,
  Dimensions,
  Alert,
  PermissionsAndroid,
  Platform,
} from 'react-native';
import { launchCamera, Asset } from 'react-native-image-picker';
import analyzeImage from '../services/geminiService'; // ÏÇ¨ÏßÑ Î∂ÑÏÑù ÏÑúÎπÑÏä§ Ìò∏Ï∂ú

const MainScreen = () => {
  const [photo, setPhoto] = useState<string | null>(null); // Ï¥¨ÏòÅÎêú ÏÇ¨ÏßÑ URI Ï†ÄÏû•
  const [result, setResult] = useState<string | null>(null); // Î∂ÑÏÑù Í≤∞Í≥º Ï†ÄÏû•

  // Android Ïπ¥Î©îÎùº Í∂åÌïú ÏöîÏ≤≠
  const requestCameraPermission = async () => {
    if (Platform.OS === 'android') {
      const granted = await PermissionsAndroid.request(
        PermissionsAndroid.PERMISSIONS.CAMERA,
        {
          title: 'Ïπ¥Î©îÎùº Ï†ëÍ∑º Í∂åÌïú ÏöîÏ≤≠',
          message: 'Ïù¥ Ïï±Ïù¥ Ïπ¥Î©îÎùºÏóê Ï†ëÍ∑ºÌïòÎ†§Î©¥ Í∂åÌïúÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.',
          buttonNeutral: 'ÎÇòÏ§ëÏóê',
          buttonNegative: 'Ï∑®ÏÜå',
          buttonPositive: 'ÌóàÏö©',
        }
      );

      if (granted !== PermissionsAndroid.RESULTS.GRANTED) {
        Alert.alert('Í∂åÌïú Í±∞Î∂ÄÎê®', 'Ïπ¥Î©îÎùº Í∂åÌïúÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.');
        return false;
      }
    }
    return true;
  };

  // Ïπ¥Î©îÎùº Î≤ÑÌäº ÌÅ¥Î¶≠ Ïãú Ìò∏Ï∂ú
  const handleTakePhoto = async () => {
    const permissionGranted = await requestCameraPermission();
    if (!permissionGranted) return;

    try {
      const response = await launchCamera({
        mediaType: 'photo',
        cameraType: 'back',
        saveToPhotos: true, // ÏÇ¨ÏßÑÏùÑ Í∞§Îü¨Î¶¨Ïóê Ï†ÄÏû•
      });

      if (response.didCancel) {
        Alert.alert('Ï∑®ÏÜåÎê®', 'ÏÇ¨ÏßÑ Ï¥¨ÏòÅÏù¥ Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§.');
        return;
      }

      if (response.errorCode || response.errorMessage) {
        Alert.alert(
          'Ïò§Î•ò',
          `ÏÇ¨ÏßÑ Ï¥¨ÏòÅ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ${response.errorMessage || response.errorCode}`
        );
        return;
      }

      const asset: Asset | undefined = response.assets?.[0];
      if (asset?.uri) {
        const photoUri = asset.uri;
        setPhoto(photoUri);

        // ÏÇ¨ÏßÑ Î∂ÑÏÑù Ìò∏Ï∂ú
        const analysis = await analyzeImage(photoUri);
        setResult(analysis);

        // Í≤∞Í≥º ÏïåÎ¶º
        Alert.alert('Î∂ÑÏÑù Í≤∞Í≥º', analysis);
      } else {
        Alert.alert('Ïò§Î•ò', 'ÏÇ¨ÏßÑÏùÑ Í∞ÄÏ†∏Ïò§Îäî Îç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      }
    } catch (error) {
      console.error('ÏÇ¨ÏßÑ Ï¥¨ÏòÅ ÎòêÎäî Î∂ÑÏÑù Ï§ë Ïò§Î•ò:', error);
      Alert.alert('Ïò§Î•ò', 'ÏÇ¨ÏßÑ Ï¥¨ÏòÅ Ï§ë Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    }
  };

  useEffect(() => {
    if (Platform.OS === 'android') {
      requestCameraPermission();
    }
  }, []);

  return (
    <View style={styles.container}>
      <ImageBackground
        source={require('../assets/map.png')} // ÏßÄÎèÑ Ïù¥ÎØ∏ÏßÄ
        style={styles.backgroundImage}
        resizeMode="cover"
      >
        <TouchableOpacity style={styles.cameraButton} onPress={handleTakePhoto}>
          <Text style={styles.buttonText}>üì∑</Text>
        </TouchableOpacity>

        {result && (
          <View style={styles.resultContainer}>
            <Text style={styles.resultText}>Î∂ÑÏÑù Í≤∞Í≥º: {result}</Text>
          </View>
        )}
      </ImageBackground>
    </View>
  );
};

const { width, height } = Dimensions.get('window');

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  backgroundImage: {
    width: width,
    height: height,
    flex: 1,
  },
  cameraButton: {
    position: 'absolute',
    top: 35,
    right: 35,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    borderRadius: 25,
    padding: 10,
  },
  buttonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },
  resultContainer: {
    position: 'absolute',
    bottom: 50,
    left: 20,
    right: 20,
    backgroundColor: 'rgba(0, 0, 0, 0.7)',
    borderRadius: 10,
    padding: 15,
  },
  resultText: {
    color: 'white',
    fontSize: 16,
    textAlign: 'center',
  },
});

export default MainScreen;
